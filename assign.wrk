      subroutine assign(npoints,zstart,zqso,xs,CDDF,
     +                  nl,ni,nhi4,z4)

      integer npoints,nl,idum,index,i,j,k,count,t
      integer s1,s2,s3
      integer index12,index14,index17,index22
      integer,parameter :: npts=4
      integer,dimension(3) :: ni
      real*8,dimension(3) :: gamma,bins3
      real*8,dimension(4) :: linA,logA,bins4,coe,sig
      real*8,dimension(npoints) :: xs,CDDF
      real*8,dimension(4000) :: nhi4,z4,gamma_int
      real*8,dimension(npts) :: xmesh,ymesh,Aa,gg
      real*8 :: c1,c2,c,d,p,q,ran3,dmin,xmin,xmax,dx,chi2
      real*8 :: zstart,zqso,z1p1,z2p1
      real*8 :: nhi,nhi_midbin,nhi_low,nhi_high,lognhi,z,delta
      real*4 :: x
      real*8 :: A,A_err,g, g_err, sigc1,sigc2
      external ran3
      data bins4/12.0,13.1,14.0,17.0/
      data bins3/13.1,14.0,17.0/
      data gamma/1.51,2.16,1.33/
      data logA/1.7793854031427535,1.52,0.72,-0.756962/
      data linA/60.170746999268566,33.11311,5.24807,0.1750/
      data sig/0.0,0.0,0.0,0.0/
! -------------------------------------------------------------------
! CREATE ARRAYS CONTAINING DATA ON NHI AND Z         
! -------------------------------------------------------------------
      z1p1=zstart+1.
      z2p1=zqso+1.
      idum=time()
      t=0
      xmin=12.0
      xmax=22.0
      dx=(xmax-xmin)/(npts-1)
      do i=1,npts
         xmesh(i)=xmin+dble(i-1)*dx
      end do
c      call fit(bins4,logA,4,sig,0,c1,c2,sigc1,sigc2,chi2,q)
c      write(6,*) 'a,b,chi2',c1,c2,chi2      
c      do i=1,npts
c         ymesh(i)=c1 + c2*xmesh(i)
c         write (6,*) xmesh(i), ymesh(i)
c      end do
      call polint(bins3,gamma,3,dble(13.1),g,g_err)
      write (6,*) '12.5, g', g
! -------------------------------------------------------------------
      do i=1,npts-1
         nhi_midbin=(xmesh(i))!+xmesh(i+1))/2.0
         nhi_low = xmesh(i)
         nhi_high= xmesh(i+1)
         call polint(bins3,gamma,3,nhi_midbin,g,g_err)
         call polint(bins4,linA,4,nhi_midbin,A,A_err)
         call get_nl(zstart,zqso,g,A,nl)
         Aa(i)=A ; gg(i) = g
c       write (6,*) 'nhi_low,nhi_high, A,g,nl',nhi_low,nhi_high,A,g,nl
         do j=1,nl
            t=t+1
 1          c=ran3(idum)
            if (c.lt.1.0) then
               dmin=20.0
               do k=1,npoints
                  delta=abs(c-CDDF(k))
                  if (delta.lt.dmin) then
                     dmin=delta
                     index=k
                  end if
               end do
            else
               goto 1
            end if
            lognhi=xs(index)
            nhi=lognhi
c         write (6,*) 'lognhi,nhi_low,nhi_high =',lognhi,nhi_low,nhi_high
            if (lognhi.ge.nhi_low.and.lognhi.lt.nhi_high) then
               nhi4(t)=lognhi
               d=ran3(idum)
               gp1=g+1.
               p=z2p1**gp1
               q=z1p1**gp1
               x=alog10(real(d*(p-q)+q))
               x=x/gp1
               z=10**x -1.0
               z4(i)=z
            else 
               goto 1
            end if
c            write (6,*) 't,nl,nhi,z',t,nl,nhi,z
         end do
      end do
      count=t
      write (6,*) 'total number of lines = ',count

      call PGBEGIN(0,'/null',1,1)
      call PGENV(11.8,22.2,minval(real(gg)),maxval(real(gg)),0,1)
      call pgsci(2)
      call pgpt(3,real(bins3),real(gamma),3)
      call pgpt(4,real(bins4),real(linA),4)
      call pgsci(1)
      call PGLINE(npts,real(xmesh),real(gg))
      call PGEND
      return
      end subroutine assign

! -------------------------------------------------------------------
      SUBROUTINE get_nl(zstart,zend,g,A,nl)
      real*8 :: zstart,zend,z1p1,z2p1,g,gp1,A,n
      integer :: i,j,nl
      
      gp1=g+1.
      z1p1=zstart+1.0
      z2p1=zend+1.0
      n=A/gp1*((z2p1)**gp1-(z1p1)**gp1)
      nl=nint(n)
      return
      end subroutine get_nl
      

      SUBROUTINE fit(x,y,ndata,sig,mwt,a,b,siga,sigb,chi2,q)
      INTEGER mwt,ndata
      REAL*8 a,b,chi2,q,siga,sigb,sig(ndata),x(ndata),y(ndata)
C     USES gammq
C     Given a set of data points x(1:ndata),y(1:ndata) with individual standard deviations
C     sig(1:ndata), t them to a straight line y = a + bx by minimizing 2. Returned are
C     a,b and their respective probable uncertainties siga and sigb, the chi-square chi2, and
C     the goodness-of-t probability q (that the t would have 2 this large or larger). If mwt=0
C     on input, then the standard deviations are assumed to be unavailable: q is returned as 1.0
C     and the normalization of chi2 is to unit standard deviation on all points.
      INTEGER i
      REAL*8 sigdat,ss,st2,sx,sxoss,sy,t,wt,gammq
      sx=0.
      sy=0.
      st2=0.
      b=0.
      if(mwt.ne.0) then
         ss=0.
         do i=1,ndata
            wt=1./(sig(i)**2)
            ss=ss+wt
            sx=sx+x(i)*wt
            sy=sy+y(i)*wt
         end do
      else
         do i=1,ndata 
            sx=sx+x(i)
            sy=sy+y(i)
         end do
         ss=float(ndata)
      endif
      sxoss=sx/ss
      if(mwt.ne.0) then
         do i=1,ndata
            t=(x(i)-sxoss)/sig(i)
            st2=st2+t*t
            b=b+t*y(i)/sig(i)
         end do
      else
         do i=1,ndata
            t=x(i)-sxoss
            st2=st2+t*t
            b=b+t*y(i)
         end do
      endif
      b=b/st2
      a=(sy-sx*b)/ss
      siga=sqrt((1.+sx*sx/(ss*st2))/ss)
      sigb=sqrt(1./st2)
      chi2=0.
      q=1.
      if(mwt.eq.0) then
         do i=1,ndata
            chi2=chi2+(y(i)-a-b*x(i))**2
         end do
         sigdat=sqrt(chi2/(ndata-2)) 
         siga=siga*sigdat
         sigb=sigb*sigdat
      else
         do i=1,ndata
            chi2=chi2+((y(i)-a-b*x(i))/sig(i))**2
         end do
c         if(ndata.gt.2) q=gammq(0.5*(ndata-2),0.5*chi2)
      endif
      return
      END SUBROUTINE fit
! -------------------------------------------------------------------
! -------------------------------------------------------------------
      SUBROUTINE polint(xa,ya,n,x,y,dy)
      INTEGER n,NMAX
      REAL*8 dy,x,y,xa(n),ya(n)
      PARAMETER (NMAX=4) 
      INTEGER i,m,ns
      REAL den,dif,dift,ho,hp,w,c(NMAX),d(NMAX)
      ns=1
      dif=abs(x-xa(1))
      do i=1,n
         dift=abs(x-xa(i))
         dift=abs(x-xa(i))
         if (dift.lt.dif) then
            ns=i
            dif=dift
         endif
         c(i)=ya(i) 
         d(i)=ya(i)
      end do 
      y=ya(ns) 
      ns=ns-1
      do m=1,n-1 
         do i=1,n-m 
            ho=xa(i)-x
            hp=xa(i+m)-x
            w=c(i+1)-d(i)
            den=ho-hp
            if(den.eq.0.) stop 'failure in polint'
            den=w/den
            d(i)=hp*den
            c(i)=ho*den
         end do
         if (2*ns.lt.n-m)then
            dy=c(ns+1)
         else
            dy=d(ns)
            ns=ns-1
         endif
         y=y+dy
      end do
      return
      END SUBROUTINE polint

! -------------------------------------------------------------------
! -------------------------------------------------------------------
      SUBROUTINE polcoe(x,y,n,cof)
      INTEGER n,NMAX
      REAL*8 cof(n),x(n),y(n)
      PARAMETER (NMAX=1) 
      INTEGER i,j,k
      REAL*8 b,ff,phi,s(NMAX)
      do i=1,n
         s(i)=0.
         cof(i)=0.
      end do
      s(n)=-x(1)
      do i=2,n 
         do j=n+1-i,n-1
            s(j)=s(j)-x(i)*s(j+1)
         end do 
         s(n)=s(n)-x(i)
      end do
      do j=1,n
         phi=n
         do k=n-1,1,-1
            phi=k*s(k+1)+x(j)*phi
         end do
         ff=y(j)/phi
         b=1. 
         do k=n,1,-1
            cof(k)=cof(k)+b*ff
            b=s(k)+x(j)*b
         end do
      end do
      return
      END

c$$$! -------------------------------------------------------------------
c$$$      subroutine power_laws(npoints,zstart,zqso,xs,ys,CDDF,
c$$$     +                      bigA,gamma,nl,ni)
c$$$! -------------------------------------------------------------------
c$$$C PURPOSE: prepare constants to be used in calculating the number of 
c$$$C          lines and power laws from Kim et al 2013
c$$$      implicit none
c$$$      integer :: index12,index13p1,index14,index17,index22,index12p75
c$$$      integer :: i,j,index,nl,npoints,idum,count
c$$$      real*8,dimension(npoints) :: xs,ys,CDDF
c$$$      real*8,dimension(3) :: bigA, gamma, n
c$$$      integer,dimension(3) :: ni
c$$$      real*8 :: dmin,d12,d12p75,d13p1,d14,d17,d22
c$$$      real*8 :: int12to14,int13p1to14,int12p75to14
c$$$      real*8 :: n1,n2,n3,total
c$$$      real*8 :: z1,z1p1,z2,z2p1,zqso, gp1
c$$$      real*8 :: zstart,corr,beta, dx
c$$$    
c$$$! -------------------------------------------------------------------
c$$$! CALCULATE INDICES for data manipulation
c$$$! -------------------------------------------------------------------     
c$$$      dmin=0.1
c$$$      do i=1,npoints
c$$$         d12=abs(xs(i)-12.0)
c$$$         if(d12.lt.dmin)then
c$$$            dmin=d12
c$$$            index12=i
c$$$         end if
c$$$      end do
c$$$! -------------------------------------------------------------------
c$$$      dmin=0.1
c$$$      do i=1,npoints
c$$$         d12p75=abs(xs(i)-12.75)
c$$$         if(d12p75.lt.dmin)then
c$$$            dmin=d12p75
c$$$            index12p75=i
c$$$         end if
c$$$      end do
c$$$! -------------------------------------------------------------------
c$$$      dmin=0.1
c$$$      do i=1,npoints
c$$$         d13p1=abs(xs(i)-13.1)
c$$$         if(d13p1.lt.dmin)then
c$$$            dmin=d13p1
c$$$            index13p1=i
c$$$         end if
c$$$      end do
c$$$! -------------------------------------------------------------------
c$$$      dmin=0.1
c$$$      do i=1,npoints
c$$$         d14=abs(xs(i)-14.0)
c$$$         if(d14.lt.dmin)then
c$$$            dmin=d14
c$$$            index14=i
c$$$         end if
c$$$      end do
c$$$! -------------------------------------------------------------------
c$$$      dmin=0.1
c$$$      do i=1,npoints
c$$$         d17=abs(xs(i)-17.0)
c$$$         if(d17.lt.dmin)then
c$$$            dmin=d17
c$$$            index17=i
c$$$         end if
c$$$      end do
c$$$! -------------------------------------------------------------------
c$$$      dmin=0.1
c$$$      do i=1,npoints
c$$$         d22=abs(xs(i)-22.0)
c$$$         if(d22.lt.dmin)then
c$$$            dmin=d22
c$$$            index22=i
c$$$         end if
c$$$      end do
c$$$! -------------------------------------------------------------------
c$$$! INTEGRATION to account for a gap in data from 12 to 13.1
c$$$! -------------------------------------------------------------------
c$$$      !numerically integrate spline from 12 to 14 and from 13.1 to 14
c$$$      !in steps of dx to get the correction factor 'corr'
c$$$      int12to14=0
c$$$      int12p75to14=0
c$$$      do i=index12,index14
c$$$         dx=10**xs(i+1)-10**xs(i)             
c$$$         int12to14=int12to14+10**ys(i)*dx
c$$$      end do
c$$$      do i=index12p75,index14
c$$$         dx=10**xs(i+1)-10**xs(i)             
c$$$         int12p75to14=int12p75to14+10**ys(i)*dx
c$$$      end do
c$$$      int13p1to14=0
c$$$      do i=index13p1,index14
c$$$         dx=10**xs(i+1)-10**xs(i)             
c$$$         int13p1to14=int13p1to14+10**ys(i)*dx
c$$$      end do
c$$$      corr=int12to14/int13p1to14
c$$$c      write (6,*) 'int[12.75->14] = ',int12p75to14
c$$$c      write (6,*) 'int[13.10->14] = ',int13p1to14
c$$$C     corr - correction factor
c$$$
c$$$! -------------------------------------------------------------------
c$$$! DETERMINE THE NUMBER OF LINES IN EACH COLUMN DENSITY BIN         
c$$$! -------------------------------------------------------------------
c$$$      ! dn/dz = A(1+z)^gamma
c$$$      ! n = A/(1+gamma)*[(1+z2)^(1+gamma) - (1+z1)^(1+gamma)]
c$$$      ! n1(12->14) = corr*A1/(1+gamma1)*[(1+z2)^(1+gamma1) - (1+z1)^(1+gamma1)]
c$$$      ! n2(14->17) = A2/(1+gamma2)*[(1+z2)^(1+gamma2) - (1+z1)^(1+gamma2)]
c$$$      ! n3(17->22) = A3/(1+gamma3)*[(1+z2)^(1+gamma3) - (1+z1)^(1+gamma3)]
c$$$! -------------------------------------------------------------------
c$$$      
c$$$      z1=zstart
c$$$      z1p1=z1+1.
c$$$      z2=zqso
c$$$      z2p1=zqso+1.
c$$$      beta=abs((ys(index14)-ys(index12))/(xs(index14)-xs(index12)))
c$$$c      write (6,*) ((10**12.00)/(10**13.1))**(1.-1.46)
c$$$      corr=(int12p75to14/int13p1to14)
c$$$      write (6,*) 'Numerical correction factor=',corr
c$$$      write (6,'(1x,a9,f6.4,3x,a7,f6.4)') 'z_start =',z1,'z_qso =',z2
c$$$! -------------------------------------------------------------------
c$$$      total=0.0
c$$$      do i=1,3
c$$$         gp1=gamma(i)+1.
c$$$         if(i.eq.1)then
c$$$            n(i) = corr*bigA(i)/(gp1)*((z2p1)**(gp1)-(z1p1)**(gp1))
c$$$         else
c$$$         n(i) = bigA(i)/(gp1)*((z2p1)**(gp1)-(z1p1)**(gp1))
c$$$         end if
c$$$         total=total+n(i)
c$$$      end do   
c$$$      ni(1)=nint(n(1))
c$$$      ni(2)=nint(n(2))
c$$$      ni(3)=nint(n(3))
c$$$      nl=ni(1)+ni(2)+ni(3)
c$$$c      write (6,*) 'A = corr*bigA/(1+gamma)'
c$$$c      write (6,*) 'A (numerical) =',corr*bigA(1)/(gamma(1)+1.)
c$$$c      write (6,*) 'gamma = ',gamma(1)
c$$$c      write (6,*) 'z1 =',z1
c$$$c      write (6,*) 'z2 =',z2
c$$$      write (6,*) 'n [12.75->14.00] (predicted) =',nint(n(1))
c$$$      write (6,*) 'n [14.00->17.00] (predicted) =',nint(n(2))
c$$$      write (6,*) 'n [17.00->22.00] (predicted) =',nint(n(3))
c$$$      write (6,*) 'Total number of lines =', nl 
c$$$      return
c$$$      end subroutine power_laws
